{"remainingRequest":"/Users/zhwtest/Desktop/VueProjects/admin_study_ui/node_modules/babel-loader/lib/index.js!/Users/zhwtest/Desktop/VueProjects/admin_study_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhwtest/Desktop/VueProjects/admin_study_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhwtest/Desktop/VueProjects/admin_study_ui/src/components/student/StudentList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhwtest/Desktop/VueProjects/admin_study_ui/src/components/student/StudentList.vue","mtime":1582622670717},{"path":"/Users/zhwtest/Desktop/VueProjects/admin_study_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhwtest/Desktop/VueProjects/admin_study_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhwtest/Desktop/VueProjects/admin_study_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhwtest/Desktop/VueProjects/admin_study_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmciOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvemh3dGVzdC9EZXNrdG9wL1Z1ZVByb2plY3RzL2FkbWluX3N0dWR5X3VpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0aW1lVmFsdWU6ICcnLAogICAgICAvLyDojrflj5bnlKjmiLfliJfooajnmoTlj4LmlbDlr7nosaEKICAgICAgcXVlcnlJbmZvOiB7CiAgICAgICAgbWVzOiAnJywKICAgICAgICBzdGF0dXM6ICcnLAogICAgICAgIHN0YXJ0VGltZTogJycsCiAgICAgICAgZW5kVGltZTogJycsCiAgICAgICAgcGFnZU51bTogMSwKICAgICAgICBwYWdlU2l6ZTogMTAKICAgICAgfSwKICAgICAgdG90YWw6IDAsCiAgICAgIHRhYmxlSGVhZDogW3sKICAgICAgICBjb2x1bW5fbmFtZTogJ2NvdXJzZV9uYW1lJywKICAgICAgICBjb2x1bW5fY29tbWVudDogJ+ivvueoi+WQjeensCcKICAgICAgfSwgewogICAgICAgIGNvbHVtbl9uYW1lOiAnY29udGVudF90aXRsZScsCiAgICAgICAgY29sdW1uX2NvbW1lbnQ6ICfnm7Tmkq3lkI3np7AnCiAgICAgIH0sIHsKICAgICAgICBjb2x1bW5fbmFtZTogJ3N0YXJ0X3RpbWUnLAogICAgICAgIGNvbHVtbl9jb21tZW50OiAn5byA6K++5pe26Ze0JwogICAgICB9LCB7CiAgICAgICAgY29sdW1uX25hbWU6ICdzY2hvb2xfbmFtZScsCiAgICAgICAgY29sdW1uX2NvbW1lbnQ6ICflrabpmaInCiAgICAgIH0sIHsKICAgICAgICBjb2x1bW5fbmFtZTogJ3N0dWRlbnRfbnVtYmVyJywKICAgICAgICBjb2x1bW5fY29tbWVudDogJ+aKpeWQjeS6uuaVsCcKICAgICAgfSwgewogICAgICAgIGNvbHVtbl9uYW1lOiAncmVhbF9udW1iZXInLAogICAgICAgIGNvbHVtbl9jb21tZW50OiAn5LiK6K++5Lq65pWwJwogICAgICB9LCB7CiAgICAgICAgY29sdW1uX25hbWU6ICdjbGFzc19yYXRlJywKICAgICAgICBjb2x1bW5fY29tbWVudDogJ+WIsOivvueOhycKICAgICAgfV0sCiAgICAgIHN0dWRlbnRMaXN0OiBbXQogICAgfTsKICB9LAogIC8vIOeUn+WRveWRqOacn+WHveaVsO+8jOi/m+mhtemdouWKoOi9vQogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldFN0dWRlbnRMaXN0KCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRTdHVkZW50TGlzdDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldFN0dWRlbnRMaXN0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3JlZiwgdXNlclJlczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kYXBpLnN0dWRlbnQuZmluZEFsbFN0dWRlbnQoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3JlZiA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICB1c2VyUmVzID0gX3JlZi5kYXRhOwoKICAgICAgICAgICAgICAgIGlmICghKHVzZXJSZXMuY29kZSAhPT0gMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+iOt+WPlueUqOaIt+WIl+ihqOWksei0pe+8gScpKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgdGhpcy5zdHVkZW50TGlzdCA9IHVzZXJSZXMuZGF0YTsKICAgICAgICAgICAgICAgIHRoaXMudG90YWwgPSB1c2VyUmVzLmRhdGEudG90YWw7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRTdHVkZW50TGlzdCgpIHsKICAgICAgICByZXR1cm4gX2dldFN0dWRlbnRMaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRTdHVkZW50TGlzdDsKICAgIH0oKSwKICAgIC8vIOWvvOWHuuaVsOaNrgogICAgZXhwb3J0RGF0YTogZnVuY3Rpb24gZXhwb3J0RGF0YSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJlcXVpcmUuZW5zdXJlKFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8g5qCH57qi5piv5rKh5pyJ6am85bOw5ZG95ZCNCiAgICAgICAgLy8gY29uc3QgeyBleHBvcnRfanNvbl90b19leGNlbCB9ID0gcmVxdWlyZSgnQC92ZW5kb3IvRXhwb3J0MkV4Y2VsJykKICAgICAgICB2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi8uLi92ZW5kb3IvRXhwb3J0MkV4Y2VsJyksCiAgICAgICAgICAgIGV4cG9ydEpzb25Ub0V4Y2VsID0gX3JlcXVpcmUuZXhwb3J0SnNvblRvRXhjZWw7IC8vIOimgei+k+WHuueahOihqOWktAoKCiAgICAgICAgdmFyIHRIZWFkZXIgPSBbJ+ivvueoi+WQjeensCcsICfnm7Tmkq3lkI3np7AnLCAn5byA6K++5pe26Ze0JywgJ+WtpumZoicsICfmiqXlkI3kurrmlbAnLCAn5LiK6K++5Lq65pWwJywgJ+WIsOivvueOhyddOyAvLyDooajlpLTlr7nlupTnmoTlhoXlrrksIOS8muS7juS4i+ihjOWumuS5ieeahCBsaXN0IOmHjOWOu+aJvuebuOW6lOeahOaVsOaNrgoKICAgICAgICB2YXIgZmlsdGVyVmFsID0gWydjb3Vyc2VfbmFtZScsICdjb250ZW50X3RpdGxlJywgJ3N0YXJ0X3RpbWUnLCAnc2Nob29sX25hbWUnLCAnc3R1ZGVudF9udW1iZXInLCAncmVhbF9udW1iZXInLCAnY2xhc3NfcmF0ZScsICdsYXN0VXBkYXRlQnknXTsgLy8g5pWw5o2u5p2l5rqQCgogICAgICAgIHZhciBsaXN0ID0gX3RoaXMuc3R1ZGVudExpc3Q7CgogICAgICAgIHZhciBkYXRhID0gX3RoaXMuZm9ybWF0SnNvbihmaWx0ZXJWYWwsIGxpc3QpOwoKICAgICAgICB2YXIgdGltZSA9IF90aGlzLiRtb21lbnQobmV3IERhdGUoKSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7IC8vIGZpbGVOYW1lOiDopoHlr7zlh7rnmoTooajmoLzlkI3np7AKCgogICAgICAgIGV4cG9ydEpzb25Ub0V4Y2VsKHRIZWFkZXIsIGRhdGEsICdTdHVkZW50TGlzdCcgKyB0aW1lKTsKICAgICAgfSk7CiAgICB9LAogICAgZm9ybWF0SnNvbjogZnVuY3Rpb24gZm9ybWF0SnNvbihmaWx0ZXJWYWwsIGpzb25EYXRhKSB7CiAgICAgIHJldHVybiBqc29uRGF0YS5tYXAoZnVuY3Rpb24gKHYpIHsKICAgICAgICByZXR1cm4gZmlsdGVyVmFsLm1hcChmdW5jdGlvbiAoaikgewogICAgICAgICAgcmV0dXJuIHZbal07CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["StudentList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区域-->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>课程信息</el-breadcrumb-item>\n      <el-breadcrumb-item>今日课程</el-breadcrumb-item>\n    </el-breadcrumb>\n    <!-- 卡片视图区域-->\n    <el-card>\n      <!-- 搜索与添加区域-->\n      <el-row>\n        <el-col :span=\"6\">\n          <!-- <el-button type=\"primary\" plain @click=\"getStudentList\"\n            >搜索</el-button\n          > -->\n          <el-button type=\"primary\" @click=\"exportData\">导出</el-button>\n          <!-- <el-button type=\"primary\" @click=\"addDialogVisible = true\"\n            >添加用户</el-button\n          > -->\n        </el-col>\n      </el-row>\n      <!-- 课程列表区域-->\n      <el-table border :data=\"studentList\">\n        <el-table-column type=\"index\" width=\"50\" label=\"序号\"></el-table-column>\n        <template v-for=\"(item, index) in tableHead\">\n          <el-table-column\n            v-if=\"item.column_name\"\n            :key=\"index\"\n            :prop=\"item.column_name\"\n            :label=\"item.column_comment\"\n          ></el-table-column>\n        </template>\n      </el-table>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      timeValue: '',\n      // 获取用户列表的参数对象\n      queryInfo: {\n        mes: '',\n        status: '',\n        startTime: '',\n        endTime: '',\n        pageNum: 1,\n        pageSize: 10\n      },\n      total: 0,\n      tableHead: [\n        { column_name: 'course_name', column_comment: '课程名称' },\n        { column_name: 'content_title', column_comment: '直播名称' },\n        { column_name: 'start_time', column_comment: '开课时间' },\n        { column_name: 'school_name', column_comment: '学院' },\n        { column_name: 'student_number', column_comment: '报名人数' },\n        { column_name: 'real_number', column_comment: '上课人数' },\n        { column_name: 'class_rate', column_comment: '到课率' }\n      ],\n      studentList: []\n    }\n  },\n  // 生命周期函数，进页面加载\n  created() {\n    this.getStudentList()\n  },\n  methods: {\n    async getStudentList() {\n      const { data: userRes } = await this.$api.student.findAllStudent()\n      if (userRes.code !== 1) {\n        return this.$message.error('获取用户列表失败！')\n      }\n      this.studentList = userRes.data\n      this.total = userRes.data.total\n    },\n    // 导出数据\n    exportData() {\n      require.ensure([], () => {\n        // 标红是没有驼峰命名\n        // const { export_json_to_excel } = require('@/vendor/Export2Excel')\n        const { exportJsonToExcel } = require('../../vendor/Export2Excel')\n        // 要输出的表头\n        const tHeader = [\n          '课程名称',\n          '直播名称',\n          '开课时间',\n          '学院',\n          '报名人数',\n          '上课人数',\n          '到课率'\n        ]\n        // 表头对应的内容, 会从下行定义的 list 里去找相应的数据\n        const filterVal = [\n          'course_name',\n          'content_title',\n          'start_time',\n          'school_name',\n          'student_number',\n          'real_number',\n          'class_rate',\n          'lastUpdateBy'\n        ]\n        // 数据来源\n        const list = this.studentList\n        const data = this.formatJson(filterVal, list)\n        const time = this.$moment(new Date()).format('YYYY-MM-DD')\n        // fileName: 要导出的表格名称\n        exportJsonToExcel(tHeader, data, 'StudentList' + time)\n      })\n    },\n    formatJson(filterVal, jsonData) {\n      return jsonData.map(v => filterVal.map(j => v[j]))\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped></style>\n"],"sourceRoot":"src/components/student"}]}